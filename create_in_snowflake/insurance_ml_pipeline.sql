-- Create database and schema
CREATE DATABASE INSURANCE;
CREATE SCHEMA ML_PIPE;

-- Create the table that we will use as our source of truth to train on
CREATE or REPLACE TABLE INSURANCE.ML_PIPE.SOURCE_OF_TRUTH(
	AGE NUMBER(3,0),
	GENDER VARCHAR(6),
	BMI FLOAT,
	CHILDREN NUMBER(2,0),
	SMOKER VARCHAR(5),
	REGION VARCHAR(10),
	MEDICAL_HISTORY VARCHAR(40),
	FAMILY_MEDICAL_HISTORY VARCHAR(40),
	EXERCISE_FREQUENCY VARCHAR(15),
	OCCUPATION VARCHAR(15),
	COVERAGE_LEVEL VARCHAR(10),
    CHARGES FLOAT
);

-- Create table that will hold the remaining records to be inserted into the landing table, simulating streamed-in data.
CREATE or REPLACE TABLE INSURANCE.ML_PIPE.INCOMING_DATA_SOURCE(
	AGE NUMBER(3,0),
	GENDER VARCHAR(6),
	BMI FLOAT,
	CHILDREN NUMBER(2,0),
	SMOKER VARCHAR(5),
	REGION VARCHAR(10),
	MEDICAL_HISTORY VARCHAR(40),
	FAMILY_MEDICAL_HISTORY VARCHAR(40),
	EXERCISE_FREQUENCY VARCHAR(15),
	OCCUPATION VARCHAR(15),
	COVERAGE_LEVEL VARCHAR(10),
    CHARGES FLOAT
);

-- Load full dataset then insert 10k rows into the SOURCE_OF_TRUTH table and 990k rows into the INCOMING_DATA_SOURCE table

-- Run the train_and_save_model.sql and create the training sproc
CREATE OR REPLACE EVENT TABLE INSURANCE.ML_PIPE.MODEL_TRACES;
ALTER ACCOUNT SET EVENT_TABLE = INSURANCE.ML_PIPE.MODEL_TRACES;

-- Create the task that calls the training sproc
CREATE OR REPLACE TASK TRAIN_SAVE_TASK
    WAREHOUSE=COMPUTE_WH
    SCHEDULE='10080 MINUTE' --Executes every week
    AS
        CALL TRAIN_SAVE_INS_MODEL('SOURCE_OF_TRUTH', FALSE);

ALTER TASK TRAIN_SAVE_TASK RESUME;

EXECUTE TASK TRAIN_SAVE_TASK;

-- Create the landing table
CREATE or REPLACE TABLE INSURANCE.ML_PIPE.LANDING_TABLE (
	AGE NUMBER(3,0),
	GENDER VARCHAR(6),
	BMI FLOAT,
	CHILDREN NUMBER(2,0),
	SMOKER VARCHAR(5),
	REGION VARCHAR(10),
	MEDICAL_HISTORY VARCHAR(40),
	FAMILY_MEDICAL_HISTORY VARCHAR(40),
	EXERCISE_FREQUENCY VARCHAR(15),
	OCCUPATION VARCHAR(15),
	COVERAGE_LEVEL VARCHAR(10),
    CHARGES FLOAT
);

-- Create stream on the landing table
CREATE OR REPLACE STREAM STREAM_ON_LANDING ON TABLE LANDING_TABLE;

-- Create a gold table for the records and their predictions to land
CREATE OR REPLACE TABLE INSURANCE_GOLD(
    	AGE NUMBER(3,0),
	GENDER VARCHAR(6),
	BMI FLOAT,
	CHILDREN NUMBER(2,0),
	SMOKER VARCHAR(5),
	REGION VARCHAR(10),
	MEDICAL_HISTORY VARCHAR(40),
	FAMILY_MEDICAL_HISTORY VARCHAR(40),
	EXERCISE_FREQUENCY VARCHAR(15),
	OCCUPATION VARCHAR(15),
	COVERAGE_LEVEL VARCHAR(10),
    METADATA$ROW_ID VARCHAR(16777216),
    METADATA$ISUPDATE BOOLEAN,
    METADATA$ACTION VARCHAR(16777216),
    METADATA_UPDATED_AT DATE,
    CHARGES FLOAT,
    PREDICTED_CHARGES FLOAT
);

-- Simulate streamed data
INSERT INTO LANDING_TABLE(
    AGE ,
	GENDER,
	BMI,
	CHARGES ,
	CHILDREN,
	SMOKER,
	REGION,
	MEDICAL_HISTORY ,
	FAMILY_MEDICAL_HISTORY,
	EXERCISE_FREQUENCY ,
	OCCUPATION ,
	COVERAGE_LEVEL
) SELECT 
    AGE,
	GENDER,
	BMI,
	CHARGES ,
	CHILDREN,
	SMOKER,
	REGION,
	MEDICAL_HISTORY ,
	FAMILY_MEDICAL_HISTORY,
	EXERCISE_FREQUENCY ,
	OCCUPATION ,
	COVERAGE_LEVEL
FROM INCOMING_DATA_SOURCE
LIMIT 10000;

-- Run predict_and_write.sql to create write_to_gold sproc

-- Check if it works on the data loaded into the stream.
CALL PREDICT_WRITE_TO_GOLD();

-- Create the predict and write task
CREATE or REPLACE TASK PREDICT_WRITE_TASK
  WAREHOUSE = COMPUTE_WH
  SCHEDULE = '1 MINUTE'
  WHEN
    SYSTEM$STREAM_HAS_DATA('STREAM_ON_LANDING')
  AS
    CALL PREDICT_WRITE_TO_GOLD();

ALTER TASK PREDICT_WRITE_TASK RESUME;